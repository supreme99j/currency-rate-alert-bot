# currency_alert_bot.py
import sqlite3
import logging
import requests
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "test"
DB_PATH = "user_data.db"
BINANCE_URL = "https://api.binance.com/api/v3/ticker/price?symbol="

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–î ===
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    c.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE,
        username TEXT
    )
    """)

    c.execute("""
    CREATE TABLE IF NOT EXISTS expectations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        symbol TEXT,
        price_min REAL,
        price_max REAL,
        active INTEGER DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        triggered_at TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(user_id)
    )
    """)

    conn.commit()
    conn.close()

def add_user(user_id, username):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()
    conn.close()

def add_expectation(user_id, symbol, price_min, price_max):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute(
        "INSERT INTO expectations (user_id, symbol, price_min, price_max) VALUES (?, ?, ?, ?)",
        (user_id, symbol.upper(), price_min, price_max)
    )
    conn.commit()
    conn.close()

def get_expectations(user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT id, symbol, price_min, price_max, created_at FROM expectations WHERE user_id=? AND active=1", (user_id,))
    rows = c.fetchall()
    conn.close()
    return rows

def get_all_active_expectations():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT id, user_id, symbol, price_min, price_max FROM expectations WHERE active=1")
    rows = c.fetchall()
    conn.close()
    return rows

def trigger_expectation(exp_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute(
        "UPDATE expectations SET active=0, triggered_at=? WHERE id=?",
        (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), exp_id)
    )
    conn.commit()
    conn.close()

def cancel_expectation(user_id, exp_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE expectations SET active=0 WHERE id=? AND user_id=?", (exp_id, user_id))
    conn.commit()
    conn.close()

def get_history(user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        SELECT id, symbol, price_min, price_max, created_at, triggered_at
        FROM expectations
        WHERE user_id=? AND active=0 AND triggered_at IS NOT NULL
        ORDER BY triggered_at DESC
        LIMIT 10
    """, (user_id,))
    rows = c.fetchall()
    conn.close()
    return rows

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –¶–ï–ù–ê–ú–ò ===
def get_price(symbol: str) -> float | None:
    try:
        resp = requests.get(BINANCE_URL + symbol.upper(), timeout=5)
        data = resp.json()
        if "price" in data:
            return float(data["price"])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
    return None

# === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    add_user(user.id, user.username)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n"
        "–í–≤–µ–¥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "`BTCUSDT 90000-90500`\n"
        "–∏–ª–∏\n"
        "`EURUSD 1.05-1.06`\n\n"
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help",
        parse_mode="Markdown"
    )

async def help_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è\n"
        "/cancel ID ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ ID\n\n"
        "/history ‚Äì –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π\n\n"
        "üëâ –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å: `SYMBOL min-max`\n"
        "–ü—Ä–∏–º–µ—Ä: `BTCUSDT 90000-90500`",
        parse_mode="Markdown"
    )

async def list_command(update: Update, context: CallbackContext):
    user = update.effective_user
    expectations = get_expectations(user.id)
    if not expectations:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π.")
        return

    msg = "üìã –¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è:\n"
    for exp_id, symbol, pmin, pmax, created in expectations:
        msg += f"ID {exp_id}: {symbol} {pmin}-{pmax} (—Å–æ–∑–¥–∞–Ω–æ {created})\n"
    await update.message.reply_text(msg)

async def cancel_command(update: Update, context: CallbackContext):
    user = update.effective_user
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel ID")
        return

    exp_id = int(context.args[0])
    cancel_expectation(user.id, exp_id)
    await update.message.reply_text(f"–û–∂–∏–¥–∞–Ω–∏–µ ID {exp_id} –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def history_command(update: Update, context: CallbackContext):
    user = update.effective_user
    history = get_history(user.id)
    if not history:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    msg = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è:\n"
    for exp_id, symbol, pmin, pmax, created, triggered in history:
        msg += (f"ID {exp_id}: {symbol} {pmin}-{pmax}\n"
                f"–°–æ–∑–¥–∞–Ω–æ: {created}\n"
                f"–°—Ä–∞–±–æ—Ç–∞–ª–æ: {triggered}\n\n")
    await update.message.reply_text(msg)

async def handle_message(update: Update, context: CallbackContext):
    user = update.effective_user
    text = update.message.text.strip().upper()

    try:
        parts = text.split()
        if len(parts) != 2:
            raise ValueError

        symbol = parts[0]
        price_range = parts[1].split("-")
        if len(price_range) != 2:
            raise ValueError

        price_min = float(price_range[0])
        price_max = float(price_range[1])

        add_expectation(user.id, symbol, price_min, price_max)
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ: {symbol} {price_min}-{price_max}"
        )
    except Exception:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n`SYMBOL min-max`\n–ü—Ä–∏–º–µ—Ä: `BTCUSDT 90000-90500`",
            parse_mode="Markdown"
        )

# === –ü–†–û–í–ï–†–ö–ê –û–ñ–ò–î–ê–ù–ò–ô ===
async def check_expectations(context: CallbackContext):
    expectations = get_all_active_expectations()
    for exp_id, user_id, symbol, pmin, pmax in expectations:
        price = get_price(symbol)
        if price is None:
            continue

        if pmin <= price <= pmax:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üîî {symbol} –¥–æ—Å—Ç–∏–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {pmin}-{pmax}\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}"
                )
                trigger_expectation(exp_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("cancel", cancel_command))
    app.add_handler(CommandHandler("history", history_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    job_queue = app.job_queue
    job_queue.run_repeating(check_expectations, interval=15, first=5)

    app.run_polling()

if __name__ == "__main__":
    main()
